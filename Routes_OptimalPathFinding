#importing the necessary libraries to use throughout my code
import requests
import json
import os

#setting the environment API key which is hardcoded into my computer (for uploading code to GitHub)
API_KEY = os.getenv("API_KEY")
#Error validation in case there was a mistake with the environment variable
if not API_KEY:
    raise ValueError("API Key is missing. Set it in environment variables.")

#url associated with the routes API specifically so it can be called off the cloud
url = "https://routes.googleapis.com/directions/v2:computeRoutes"

#function getResponse which returns the response with specified parameters determined by a call
def getResponse(oriLat, oriLong, destLat, destLong):
    headers = {
        "Content-Type": "application/json",
        "X-Goog-Api-Key": API_KEY,
        #specifies what the API will output (distance, duration and navigation instructions)
        "X-Goog-FieldMask": "routes.legs.distanceMeters,routes.legs.duration,routes.legs.steps.navigationInstruction"
    }

    #specific data which highlights user preferences and sets the API to find the best route 
    data = {
        "origin": {"location": {"latLng": {"latitude": oriLat, "longitude": oriLong}}},
        "destination": {"location": {"latLng": {"latitude": destLat, "longitude": destLong}}},
        "travelMode": "DRIVE",
        "routingPreference": "TRAFFIC_AWARE",
        "computeAlternativeRoutes": True,
        "units": "METRIC",
        "languageCode": "en-US",
        "routeModifiers": {
            "avoidTolls": True, 
            "avoidHighways": False, 
            "avoidFerries": True
        }
    }
    print(json.dumps(data, indent=2))  #Debugging JSON structure
    response = requests.post(url, headers=headers, json=data)
    #returns the response (end of function)
    return response.json()
    
#function that finds the optimal route between two pathways using the Routes API
def findOptimalRoute():
    try:
        print("Sending request with data:")
        #calls method getResponse with specific parameters (will be called by geocode class during group implementation)
        directions = getResponse(37.417670, -122.0827784, 37.417670, -121.079595)

        #Extracting trip details
        if "routes" in directions and directions["routes"]:
            route = directions["routes"][0]  #Assuming first route is optimal

            for leg in route.get("legs", []):
                #Extracting the trip distance and converting it into km
                distance_m = leg.get("distanceMeters", "Unknown distance")
                distance_km = round(distance_m/1000, 2)

                #Extracting the trip durationa and converting it into hours and minutes
                duration_s = int(leg.get("duration", "Unknown duration").replace("s", ""))
                hours = duration_s//3600
                minutes = (duration_s%3600)//60
                duration_final = f"{hours}h {minutes}m" if hours > 0 else f"{minutes}m"

                #printing total distance and duration for users to see
                print(f"Total Distance: {distance_km} km")
                print(f"Total Duration: {duration_final}")

                #printing navigation instructions
                print("\nNavigation Instructions:")
                steps = leg.get("steps", [])
                for i, step in enumerate(steps):
                    #getting instructions for each step
                    instruction = step.get("navigationInstruction", {})
                    print(f"- {instruction}")
                    #If it's the last step, add a message to let users know they have reached the final destination
                    if i == len(steps) - 1:
                        print("You have reached your final destination!")
        else: #enter if no optimal route is found
            print("No route found!")
    #error checking in case of an exception
    except requests.exceptions.RequestException as e:
        print(f"Request failed: {e}")
        return None

if __name__ == "__main__":
    #calling the findOptimalRoute path method and returns the 
    routes = findOptimalRoute()
    #only prints if the route has a specified value
    if routes:
        print(routes) #prints distance, time and navigation instructions